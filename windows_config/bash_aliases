#| |__   __ _ ___| |__     __ _| (_) __ _ ___
#| '_ \ / _` / __| '_ \   / _` | | |/ _` / __|
#| |_) | (_| \__ \ | | | | (_| | | | (_| \__ \
#|_.__/ \__,_|___/_| |_|  \__,_|_|_|\__,_|___/

#deleteing start alias
unalias start 2> /dev/null

alias bd=". bd -si"

#g for git 
alias g="git"
alias gs="git status"
alias ga="git add -A"
alias gpush="git push"
alias gpull="git pull"

alias c="clear"

#r for ranger
alias r="ranger"

#running valgrind
alias vg="valgrind --tool=memcheck --leak-check=full --show-leak-kinds=all --track-origins=yes"

#opening notepad ++
alias np="/mnt/c/Program\ Files/Notepad++/notepad++.exe"

#going to psy directory
alias cdpsy="cd /mnt/c/Users/Shawn/'OneDrive - Seneca'/seneca/semester_4/PSY222"
#going to WEB directory
alias cdweb=" cd /mnt/c/Users/Shawn/'OneDrive - Seneca'/seneca/semester_4/WEB322;"
#going to DBS directory
alias cddbs=" cd /mnt/c/Users/Shawn/'OneDrive - Seneca'/seneca/semester_4/DBS322;"

#SYD notes
alias sydnotes="cd /mnt/c/Users/Shawn/'OneDrive - Seneca'/seneca/semester_3/SYD_366_Softwarer_Analysis_and_Design-1; nvim SYD_366_notes.md; cd - > /dev/null"

#oop notes
alias oopnotes="cd /mnt/c/Users/Shawn/'OneDrive - Seneca'/seneca/semester_3/OOP_345_Object-Oriented_Programming_Using_C++/; nvim OOP_345_notes.md; cd - > /dev/null"

#CUL notes
alias culnotes="cd /mnt/c/Users/Shawn/'OneDrive - Seneca'/seneca/semester_3/CUL_485_movies_and_morality/; nvim CUL_485_notes.md; cd - > /dev/null"

#going to senece onedrive directory
alias cdone="cd /mnt/c/Users/Shawn/OneDrive\ -\ Seneca"

##setting vim to open neovim
#alias vim="nvim"

#make copying always recursive
alias cp="cp -r"

#make zip always recursive
alias zip="zip -r"

#make rm-r always prompt
alias rm="rm -I"

#open gitHub desktop application
alias gitd="/mnt/c/Users/Shawn/AppData/Local/GitHubDesktop/GitHubDesktop.exe"

#opening vimrc
alias vimrc="nvim ~/.config/nvim/init.vim"

#opening ivm
alias v="nvim"

#opening taskrc
alias trc="nvim ~/.taskrc"

#to open typora
function typora
{
	for current in $@; do
		"/mnt/c/Program Files/Typora/Typora.exe" "$@";
	done
}

#quickly get to the download directory
alias dl="cd /mnt/c/Users/Shawn/Downloads/; ls -lt | head -7"

#updating the source bashrc file
alias sr="source ~/.bashrc"

#moving to repos
alias repos="cd /mnt/c/Users/Shawn/source/repos"

#editing bashrc file via vim
alias bashrc="nvim ~/.bashrc"

#editing .bash_alias file
alias bash_alias="nvim ~/.bash_aliases"

#opening outlook
alias outlook="echo opening outlook...; /mnt/c/Program\ Files/Microsoft\ Office/root/Office16/OUTLOOK.EXE;"

#compiling all .cpp and .h files
alias gcc-a="g++ *.cpp *.h"

#opening neomutt
alias mail="neomutt"

#t for task
alias t="task"

#print student number
alias studentNum="echo 160568192"

#auto complete in tmux
alias tma='tmux attach -t $1'

if [ -f ~/.tmux_completion ]; then
    . ~/.tmux_completion
fi

#for starting any file(s)
function start
{
    if [ $# -eq 0 ]; then
        echo "Opening current directory..."
        xdg-open . 2> /dev/null
    else
        for current in "$@"
        do
            echo "opening $current..."
            xdg-open "$current" 2> /dev/null

        done
    fi
}

#to open all .h and .cpp files in a new vs code window
function codea
{
	cpp=(`find ./ -maxdepth 1 -name "*.cpp"`)
	h=(`find ./ -maxdepth 1 -name "*.h"`)

	if [ ${#cpp[@]} -gt 0 ]; then
		code -n ${cpp[*]}
	else
		echo 'no .cpp file(s) present'
	fi

	if [ ${#h[@]} -gt 0 ]; then
		code ${h[*]}
	else
		echo 'no .h file(s) found'

	fi

}
# function mvdest
# {
#     for LAST; do true; done
#     #it would have to take path name as arguement 2.
#     PATHNAME=$LAST

#     for current in "$@"
#     do

#     done
# }

#make a directory and go into that directory
function mkdirin { mkdir $1 && cd $1; }

#move functions

function mvoop
{
    DEST=$(ls -d /mnt/c/Users/Shawn/OneDrive\ -\ Seneca/seneca/semester_3/OOP_345_Object-Oriented_Programming_Using_C++/*/ | fzf)
    mv -v "$@" "$DEST"
    cd "$DEST"
}

function mvsyd
{
    DEST=$(ls -d /mnt/c/Users/Shawn/OneDrive\ -\ Seneca/seneca/semester_3/SYD_366_Softwarer_Analysis_and_Design-1/*/ | fzf)
    mv -v "$@" "$DEST"
    cd "$DEST"
}

function mvcul
{

    DEST=$(ls -d /mnt/c/Users/Shawn/OneDrive\ -\ Seneca/seneca/semester_3/CUL_485_movies_and_morality/*/ | fzf)
    mv -v "$@" "$DEST"
    cd "$DEST"
}


function oopDeclaration
{
	cal
	read -p "Date: " DATE
	for CURRENT in $@; do

		mv $CURRENT $CURRENT.tmp
		echo -e "/*Name: Shawn Yu\nStudent number: 160568192\nEmail: hyu126@myseneca.ca\nDate: $DATE\nI have done all the coding by myself and only copied the code that my professor provided to complete my workshops and assignments.*/" > $CURRENT
		cat $CURRENT.tmp >> $CURRENT && echo "declaration added to $CURRENT"
		rm $CURRENT.tmp

	done
}

#creates a Excute bash file to first compile the program files being passed in as arguments
function excfile
{
	read -p "name of the output file: " OUTPUT
        autoexpect "$1"

        #replace the last line with interact
        cp script.exp script.exp.tmp
        sed '$ d' script.exp.tmp > script.exp
        rm -f script.exp.tmp >/dev/null

        echo "interact" >> script.exp

        mv script.exp "autocompile_$OUTPUT".exp && echo -e "\nscript.exp renamed to "autocompile_$OUTPUT".exp"

}

#this function recompiles the program and runs the previous excute.exp script on a.out
function updatefile
{
    g++ "$@"

    if test -f "./excute.exp"; #checking if previous function has been ran
    then
        echo "successfully compiled!"

        ./excute.exp

    else
        echo 'please run excfile first'
    fi
}

#mdless any cheatsheet in cheatsheet directory
#function vcheat
#{
#	du -a ~/personal/cheatsheets/*.md | awk '{print $2}' | fzf | xargs mdless
#open cheatsheet in vim
function cheat
{
	du -a ~/personal/cheatsheets/*.md | awk '{print $2}' | fzf | xargs $EDITOR

}
